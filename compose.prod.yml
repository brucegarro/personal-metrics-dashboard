 #This can be run like this:
#   docker compose -f compose.prod.yaml up --build

version: "3.9"

services:
    app:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: fastapi-prod
        ports:
          - "443:443"
          - "80:80"
        volumes:
          - /etc/letsencrypt:/etc/letsencrypt:ro
        environment:
          - PYTHONDONTWRITEBYTECODE=1
          - PYTHONUNBUFFERED=1
          - PIP_NO_CACHE_DIR=1
          - WEB_CONCURRENCY=2
          - WEB_THREADS=4
          - WEB_TIMEOUT=60
        env_file: .env
        restart: unless-stopped
        command: [
            "gunicorn",
            "-k","uvicorn.workers.UvicornWorker",
            "main:app",
            "--bind","0.0.0.0:443",
            "--bind","0.0.0.0:80",
            "--workers","${WEB_CONCURRENCY}",
            "--threads","${WEB_THREADS}",
            "--timeout","${WEB_TIMEOUT}",
            "--graceful-timeout","30",
            "--certfile","/etc/letsencrypt/live/www.brucegarro.com/fullchain.pem",
            "--keyfile","/etc/letsencrypt/live/www.brucegarro.com/privkey.pem"
        ]
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_started
            migrate:
                condition: service_completed_successfully
        healthcheck:
            # if curl isn't in your image, swap for wget/netcat or a tiny python check
            test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health || exit 1"]
            interval: 15s
            timeout: 3s
            retries: 5
            start_period: 20s
        user: "10001:10001"
        read_only: true
        tmpfs:
          - /tmp
    worker:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: fastapi-worker-prod
        environment:
          - DEFAULT_USER_ID=appuser
        env_file: .env
        command: ["rq", "worker", "-u", "${REDIS_URL}", "etl"]
        restart: unless-stopped
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_started
            migrate:
                condition: service_completed_successfully
        healthcheck:
            test: ["CMD-SHELL", "python - <<'PY'\nfrom redis import Redis\nimport sys\nr=Redis.from_url('${REDIS_URL}')\nsys.exit(0 if r.ping() else 1)\nPY"]
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 20s
        user: "10001:10001"
        read_only: true
        tmpfs:
          - /tmp
    db:
        image: postgres:16
        env_file: .env
        ports: ["5432:5432"]
        volumes:
          - /data/postgres/pgdata:/var/lib/postgresql/data   # bind to your EBS mount
        healthcheck:
            test: ["CMD-SHELL","pg_isready -U appuser -d appdb"]
            interval: 10s
            timeout: 3s
            retries: 5
        restart: unless-stopped
    redis:
        image: redis:7-alpine
        container_name: redis
        command: ["redis-server","--appendonly","yes"]  # basic durability
        volumes:
          - /data/redis:/data                           # optional EBS subdir
        restart: unless-stopped
    migrate:
        build: .
        env_file: .env
        command: ["alembic","upgrade","head"]
        depends_on:
          db:
            condition: service_healthy
